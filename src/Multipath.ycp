/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Multipath.ycp
 * Package:	Configuration of multipath
 * Summary:	Multipath settings, input and output functions
 * Authors:	Coly Li <coyli@novell.com>
 *
 * $Id: Multipath.ycp,v 1.30 2007/01/19 09:38:40 coly Exp $
 *
 * Representation of the configuration of multipath.
 * Input and output routines.
 */

{

module "Multipath";
textdomain "multipath";

import "Progress";
import "Report";
import "Summary";
import "Message";
import "Label";
import "Popup";
import "Wizard";
import "Confirm";
import "PackageSystem";

global boolean config_modified = false;

boolean Modified();
boolean ReallyAbort();


/**
 * Abort function
 * return boolean return true if abort
 */
global boolean() AbortFunction = Modified;

/**
 * Abort function
 * @return boolean return true if abort
 */
global define boolean Abort() ``{
    if(AbortFunction != nil)
    {
	return AbortFunction () == true;
    }
    return false;
}

/**
 * Data was modified?
 * @return true if modified
 */
boolean Modified() {
    return config_modified;
}

/**
 * work around a bug in compiling ybc with UI as Y2Namespace
 *  #299258 
 */
any dummy = UI::GetDisplayInfo();

include "multipath/helps.ycp";
include "multipath/complex.ycp";


boolean Read_Configures()
{
    boolean ret = false;
    
    config_modified = false;
    defaults_items = $[];
    devices_items = [];
    multipaths_items = [];
    blacklist_items = [];
    blacklist_exception_items = [];
    

    /* prepare for loading built-in configurations */
    SCR::Execute(.target.bash, "/sbin/multipath -t > " + builtin_multipath_conf_path);

    ret = Read_MultipathConfig();
    if(ret == false) {
	Report::Error(_("Cannot read multipath section in multipath configuration"));
	return false;
    }

    ret = Read_DefaultsConfig();
    if(ret == false) {
	Report::Error(_("Cannot read defaults section in multipath configuration"));
	return false;
    }

    ret = Read_BlacklistConfig();
    if(ret == false) {
	Report::Error(_("Cannot read blacklist section in multipath configuration"));
	return false;
    }

    ret = Read_BlacklistException_Config();
    if(ret == false) {
	Report::Error(_("Cannot read blacklist_exceptions section in multipath configuration"));
	return false;
    }

    ret = Read_DeviceConfig();
    if(ret == false) {
	Report::Error(_("Cannot read devices section in multipath configuration"));
	return false;
    }
    return true;
}

/**
 * Read all multipath settings
 * @return true on success
 */
global boolean Read() {

    boolean ret = false;

    /* Multipath read dialog caption */
    string caption = _("Initializing multipath Configuration");

    integer steps = 4;

    integer sl = 100;
    sleep(sl);

    /* We do not set help text here, because it was set outside */
    Progress::New( caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Read configurations"),
	    /* Progress stage 2/3 */
	    _("Read service status"),
	    /* Progress stage 3/3 */
	    _("Detect the devices")
	], [
	    /* Progress step 1/3 */
	    _("Reading the configurations..."),
	    /* Progress step 2/3 */
	    _("Reading the service status..."),
	    /* Progress step 3/3 */
	    _("Detecting the devices..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );
    list<string> required_pack_list = ["multipath-tools", "device-mapper"];
    ret = PackageSystem::CheckAndInstallPackagesInteractive (required_pack_list);
    if(ret == false) {
	Report::Error(_("Cannot install required packages"));
	return false;
    }

    ret = Read_Configures();
    if (ret == false)
	return ret;

    Progress::NextStage();
    sleep(sl);

    /* read multipath service status */
    service_status = (integer) SCR::Execute(.target.bash, "/etc/init.d/multipathd status");
    if(service_status > 0)
	service_status = 1;
    Progress::NextStep();
    sleep(sl);

    /* read current settings */
    Progress::NextStage();
    /* Error message */
    if(false) Report::Error(Message::CannotReadCurrentSettings());
    sleep(sl);

    /* detect devices */
    Progress::NextStage();
    /* Error message */
    if(false) Report::Warning(_("Cannot detect devices."));
    sleep(sl);

    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    config_modified = false;
    return true;
}

/**
 * Write all multipath settings
 * @return true on success
 */
global boolean Write() {
    /* Multipath read dialog caption */
    string caption = _("Saving multipath Configuration");

    integer steps = 2;

    integer sl = 100;
    sleep(sl);

    if(config_modified == false) 
	return true;

    /* We do not set help text here, because it was set outside */
    Progress::New(caption, " ", steps, [
	    /* Progress stage 1/3 */
	    _("Write the settings"),
	    /* Progress stage 2/3 */
	    _("Restart multipathd")
	], [
	    /* Progress step 1/2 */
	    _("Writing the settings..."),
	    /* Progress step 2/2 */
	    _("Restarting multipathd..."),
	    /* Progress finished */
	    _("Finished")
	],
	""
    );

    /* write settings */
    Progress::NextStage();
    map configurations = Build_Multipath_Conf();
    if(configurations == nil)
	return false;
    if(false == SCR::Write(.etc.multipath.all, configurations)) {
	Report::Error(_("Can not write settings."));
	return false;
    }
    SCR::Write(.etc.multipath, nil);

    /* restart multipathd */
    Progress::NextStage ();
    if(service_status == 1) {
	if( 0 != SCR::Execute(.target.bash, "/etc/init.d/multipathd restart")) {
	    Report::Error(_("Restart multipathd failed."));
	    return false;
	}
	sleep(sl);
    }

    /* Progress finished */
    Progress::NextStage();
    sleep(sl);

    return true;
}

/**
 * Return a modification status
 * @return true if data was modified
 */

boolean ReallyAbort() {
    return !Modified() || Popup::ReallyAbort(true);
}

/**
 * Read settings dialog
 * @@return `abort if aborted and `next otherwise
 */
global symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @@return `abort if aborted and `next otherwise
 */
global symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    boolean ret = Write();
    return ret ? `next : `abort;
}


/*
 * Summary dialog
 * @return dialog result
 */
global any SummaryDialog() {

    y2milestone("--------- in SummaryDialog --------------------");

    has_dumbtab = UI::HasSpecialWidget(`DumbTab);

    Wizard::SetContentsButtons(caption, contents, HELPS["Status_help"]:"",
	    Label::BackButton(), Label::FinishButton());
    Wizard::HideBackButton();

    any ret = nil;
    symbol current_tab = `status;
    integer interval_millisec = 5000;

    while(true) {
	ret = UI::TimeoutUserInput(interval_millisec);
	if(ret == `next) {
	    break;
	}

	if((ret == `timeout) && (current_tab == `status)) {
	    Update_Service_Status();
	    continue;
	}

	if(ret == `abort || ret == `cancel || ret == `back) {
	    if(ReallyAbort()) break;
	    else continue;
	} else if (ret == _("Status")) {
	    Wizard::SetContentsButtons(caption, contents, HELPS["Status_help"]:"",
					Label::BackButton(), Label::FinishButton());
	    Wizard::HideBackButton();
	    if(has_dumbtab)
		UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Status"));
            UI::ReplaceWidget(`id(`tab_replace_id), tab_status );
	    Update_Service_Status();
	    current_tab = `status;
	    continue;
	} else if (ret == _("Configure")) {
	    Wizard::SetContentsButtons(caption, contents, HELPS["Configure_help"]:"",
					Label::BackButton(), Label::FinishButton());
	    Wizard::HideBackButton();
	    if(has_dumbtab)
		UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Configure"));
            UI::ReplaceWidget(`id(`tab_replace_id), tab_config );
	    UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
	    current_tab = `configure;
	    continue;
        } else if(ret == `start_multipath) {
	    if (Modified() == true &&
		Popup::YesNo(_("Ignore your modification ?")) == false)
	    {
		    Update_Service_Status();
		    continue;
	    }
	    Start_Service();
	    Read_Configures();
	    continue;
	} else if(ret == `stop_multipath) {
	    if (Modified() == true &&
		Popup::YesNo(_("Ignore your modification ?")) == false)
	    {
		    Update_Service_Status();
		    continue;
	    }
	    Stop_Service();
	    Read_Configures();
	    continue;
        } else if(ret == `blacklist_config_id) {
	    ret = Blacklist_Dialog();

	    if(ret == `cancel || ret == `abort) {
		if(ReallyAbort()) break;
	    } else if(ret == `next || ret == `back) {
		Wizard::SetContentsButtons(caption, contents, HELPS["Configure_help"]:"",
					Label::BackButton(), Label::FinishButton());
		Wizard::HideBackButton();
		UI::ReplaceWidget(`id(`contents_replace_id), Tabs);
		if(has_dumbtab)
		    UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Configure"));
		UI::ReplaceWidget(`id(`tab_replace_id), tab_config);
		UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
		continue;
	    }
	} else if (ret == `blacklist_exception_config_id) {
	    ret = Blacklist_Exception_Dialog();

	    if(ret == `cancel || ret == `abort) {
		if(ReallyAbort()) break;
	    } else if (ret == `next || ret == `back) {
		Wizard::SetContentsButtons(caption, contents, HELPS["Configure_help"]:"",
					Label::BackButton(), Label::FinishButton());
		Wizard::HideBackButton();
		UI::ReplaceWidget(`id(`contents_replace_id), Tabs);
		if(has_dumbtab)
		    UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Configure"));
		UI::ReplaceWidget(`id(`tab_replace_id), tab_config);
		UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
		continue;
	    }
	} else if(ret == `defaults_config_id) {
	    ret = Defaults_Dialog();
	    if(ret == `cancel || ret == `abort) {
		if(ReallyAbort()) break;
	    }
	    else if(ret == `next || ret == `back) {
		Wizard::SetContentsButtons(caption, contents, HELPS["Configure_help"]:"",
					Label::BackButton(), Label::FinishButton());
		Wizard::HideBackButton();
		UI::ReplaceWidget(`id(`contents_replace_id), Tabs);
		if(has_dumbtab)
		    UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Configure"));
		UI::ReplaceWidget(`id(`tab_replace_id), tab_config);
		UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
		continue;
	    }
	} else if(ret == `device_config_id) {
	    ret = Devices_Dialog();
	    if(ret == `cancel || ret == `abort) {
		if(ReallyAbort()) break;
	    }
	    else if(ret == `next || ret == `back) {
		Wizard::SetContentsButtons(caption, contents, HELPS["Configure_help"]:"",
					Label::BackButton(), Label::FinishButton());
		Wizard::HideBackButton();
		UI::ReplaceWidget(`id(`contents_replace_id), Tabs);
		if(has_dumbtab)
		    UI::ChangeWidget(`id(`tabs), `CurrentItem, _("Configure"));
		UI::ReplaceWidget(`id(`tab_replace_id), tab_config);
		UI::ChangeWidget(`id(`multipaths_table_id), `Items, Build_MultipathsTable());
		continue;
	    }
	} else if(ret == `multipaths_del_id || 
		    ret == `multipaths_edit_id ||
		    ret == `multipaths_table_id ||
		    ret == `multipaths_add_id) {
		Multipath_Dialog((symbol)ret);
		continue;
	} 
    }

    return ret;
}

/* EOF */
}
